name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.1.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --no-audit

      - name: NPM Audit
        run: npm audit --audit-level=critical || echo "No critical vulnerabilities"
        continue-on-error: true

      - name: Run tests
        run: npm test || echo "No tests found"

      - name: Code Coverage
        run: npm run coverage || echo "No coverage available"
        continue-on-error: true

  lint:
    name: SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.1.0'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  gitleaks:
    name: GitLeaks Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download and install GitLeaks
        run: |
          GITLEAKS_VERSION=8.24.3
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz gitleaks
          chmod +x gitleaks

      - name: Run GitLeaks scan
        run: ./gitleaks detect --source . --verbose --redact
        
  # sonarqube-scan:
  #   name: SonarQube Scan
  #   runs-on: ubuntu-latest
  #   needs: [test, lint, gitleaks]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '24.1.0'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run SonarQube Scanner
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: |
  #         npm install -g sonarqube-scanner
  #         sonar-scanner \
  #           -Dsonar.projectKey=Solar-System \
  #           -Dsonar.sources=. \
  #           -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
  #           -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
  #           -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info || true

  #     - name: Wait for Sonar Quality Gate
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #       with:
  #         scanMetadataReportFile: .scannerwork/report-task.txt
  #         failPipelineOnQualityGateFailure: false # set to true to fail the pipeline on quality gate failure
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  owasp-scan:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: [test, lint, gitleaks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Solar-System'
          format: 'ALL'
          out: './'
          args: --disableYarnAudit --prettyPrint

      - name: Upload Dependency Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report.*

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, gitleaks, owasp-scan]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.1.0'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.REPO_PAT }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            latest

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set image tag output
        id: set_output
        run: echo "image_tag=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_PAT }}

      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: ${{ needs.docker.outputs.image_tag }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"
          echo "Updating image to ${NEW_IMAGE} in deployment.yaml"
          sed -i "s|image: ${REGISTRY}/.*/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          grep -A 1 "image:" kubernetes/deployment.yaml

      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push
